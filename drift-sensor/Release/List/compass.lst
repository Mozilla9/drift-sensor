###############################################################################
#                                                                             #
#                                                       08/Oct/2012  01:42:11 #
# IAR ANSI C/C++ Compiler V6.21.2.22939/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Projects\google_host\drift-sensor\Compass\compass.c   #
#    Command line =  D:\Projects\google_host\drift-sensor\Compass\compass.c   #
#                    -D NDEBUG -lc D:\Projects\google_host\drift-sensor\Relea #
#                    se\List\ --diag_suppress Pe550 -o                        #
#                    D:\Projects\google_host\drift-sensor\Release\Obj\        #
#                    --no_unroll --no_inline --no_tbaa --no_scheduling        #
#                    --endian=little --cpu=ARM7TDMI-S -e --fpu=None           #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    D:\Projects\google_host\drift-sensor\ -I                 #
#                    D:\Projects\google_host\drift-sensor\Config\             #
#                    --interwork --cpu_mode thumb -Om                         #
#    List file    =  D:\Projects\google_host\drift-sensor\Release\List\compas #
#                    s.lst                                                    #
#    Object file  =  D:\Projects\google_host\drift-sensor\Release\Obj\compass #
#                    .o                                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\Projects\google_host\drift-sensor\Compass\compass.c
      1          /******************************************************************************/
      2          /* compass.c                                                                  */
      3          /******************************************************************************/
      4          
      5          
      6          #include "data_types.h"
      7          #include "Core\core.h"
      8          #include "Uart\uart0.h"
      9          #include "Led\led.h"
     10          #include "Uart\v_printf.h"
     11          #include "I2C\i2c0.h"
     12          #include "Ringbuff\ring_buffer.h"
     13          #include "Lis3dh\lis3dh.h"
     14          #include "Compass\compass.h"
     15          
     16          
     17          static volatile uint32_t sys_tick = 0;
     18          
     19          
     20          
     21          
     22          /*
     23           * Get sys tick
     24           *
     25           */
     26          uint32_t get_sys_tick() {
     27              return sys_tick;
     28          }
     29          
     30          
     31          /*
     32           * Get time
     33           *
     34           */
     35          uint32_t get_time() {
     36              return sys_tick / TIMER0_TICK;
     37          }
     38          
     39          
     40          /*
     41           * Timer0 interrupt handler
     42           *
     43           */
     44          static __irq __arm void __interrupt_handler_timer0() {
     45              sys_tick++;
     46          
     47              T0IR = 0x01;
     48              VICADDRESS = 0;
     49          }
     50          
     51          
     52          /*
     53           * Init interrupt
     54           *
     55           */
     56          static void init_irq() {
     57              // VIC in user mode
     58              VICPROTECTION_bit.VIC_ACCESS = 0;
     59          
     60          
     61              uint32_t *vect_addr, *vect_cntl;
     62          
     63              VICINTENCLEAR = 0xffffffff;
     64              VICADDRESS = 0L;
     65              VICINTSELECT = 0L;
     66          
     67              for (uint32_t i = 0; i < VIC_SIZE; i++) {
     68                  vect_addr = (uint32_t *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
     69                  vect_cntl = (uint32_t *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
     70                  *vect_addr = 0x0;
     71                  *vect_cntl = 0xF;
     72              }
     73          
     74              VICINTSELECT_bit.TIMER0 = 0;
     75              VICVECTPRIORITY4_bit.PRIORITY = 13;
     76          
     77              VICINTSELECT_bit.UART0 = 0;
     78              VICVECTPRIORITY6_bit.PRIORITY = 9;
     79          
     80              VICINTSELECT_bit.I2C0 = 0;
     81              VICVECTPRIORITY9_bit.PRIORITY = 9;
     82          
     83              VICVECTADDR4 = (uint32_t)__interrupt_handler_timer0;
     84              VICVECTADDR6 = (uint32_t)__interrupt_handler_uart0;
     85              VICVECTADDR9 = (uint32_t)__interrupt_handler_i2c0;
     86          
     87              VICINTENABLE_bit.UART0 = 1;
     88              VICINTENABLE_bit.TIMER0 = 1;
     89              VICINTENABLE_bit.I2C0 = 1;
     90          }
     91          
     92          
     93          /*
     94           * Init device
     95           *
     96           */
     97          void init_device() {
     98              PCONP_bit.PCUART0 = 0;
     99              PCONP_bit.PCPWM1 = 0;
    100              PCONP_bit.PCI2C0 = 0;
    101              PCONP_bit.PCSSP1 = 0;
    102              PCONP_bit.PCAN1 = 0;
    103              PCONP_bit.PCAN2 = 0;
    104              PCONP_bit.PCI2C1 = 0;
    105              PCONP_bit.PCSSP0 = 0;
    106              PCONP_bit.PCTIM2 = 0;
    107              PCONP_bit.PCTIM3 = 0;
    108              PCONP_bit.PCUART2 = 0;
    109              PCONP_bit.PCI2C2 = 0;
    110              PCONP_bit.PCI2S = 0;
    111              PCONP_bit.PCGPDMA = 0;
    112              PCONP_bit.PCENET = 0;
    113          
    114              init_timer0();
    115              init_led();
    116              init_lis3dh();
    117              init_ring_buff(pointerRingBuff);
    118          
    119              init_uart0(57600, 3);
    120              INT_UART0RX_ON;
    121          
    122              init_irq();
    123          }

   Maximum stack usage in bytes:

     Function                   .cstack
     --------                   -------
     __interrupt_handler_timer0      8
     get_sys_tick                    0
     get_time                        4
     init_device                     8
     init_irq                       16


   Section sizes:

     Function/Label             Bytes
     --------------             -----
     _A_PCONP                      4
     _A_VICIRQSTATUS               4
     _A_VICINTSELECT               4
     _A_VICINTENABLE               4
     _A_VICINTENCLEAR              4
     _A_VICPROTECTION              4
     VICVECTADDR4                  4
     VICVECTADDR6                  4
     VICVECTADDR9                  4
     _A_VICVECTPRIORITY4           4
     _A_VICVECTPRIORITY6           4
     _A_VICVECTPRIORITY9           4
     VICADDRESS                    4
     _A_U0IER                      4
     _A_T0IR                       4
     sys_tick                      4
     get_sys_tick                  6
     get_time                     16
     __interrupt_handler_timer0   56
     init_irq                    152
     init_device                 172
     ??DataTable4                  4
     ??DataTable4_1                4
     ??DataTable4_2                4
     ??DataTable4_3                4
     ??DataTable4_4                4
     ??DataTable4_5                4
     ??DataTable4_6                4
     ??DataTable4_7                4
     ??DataTable4_8                4
     ??DataTable4_9                4
     ??DataTable4_10               4
     ??DataTable4_11               4
     ??DataTable4_12               4
     ??DataTable4_13               4
     ??DataTable4_14               4
     ??DataTable4_15               4
     ??DataTable4_16               4
     ??DataTable4_17               4
     ??DataTable4_18               4
     ??DataTable4_19               4
     ??DataTable4_20               4
     ??DataTable4_21               4
     ??DataTable4_22               4

 
   4 bytes in section .bss
  60 bytes in section .data
 494 bytes in section .text
 
 494 bytes of CODE memory
   4 bytes of DATA memory (+ 60 bytes shared)

Errors: none
Warnings: none
