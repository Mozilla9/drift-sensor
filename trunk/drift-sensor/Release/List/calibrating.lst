###############################################################################
#                                                                             #
#                                                       08/Oct/2012  01:42:10 #
# IAR ANSI C/C++ Compiler V6.21.2.22939/W32 EVALUATION for ARM                #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Projects\google_host\drift-sensor\Drift\calibrating.c #
#    Command line =  D:\Projects\google_host\drift-sensor\Drift\calibrating.c #
#                     -D NDEBUG -lc D:\Projects\google_host\drift-sensor\Rele #
#                    ase\List\ --diag_suppress Pe550 -o                       #
#                    D:\Projects\google_host\drift-sensor\Release\Obj\        #
#                    --no_unroll --no_inline --no_tbaa --no_scheduling        #
#                    --endian=little --cpu=ARM7TDMI-S -e --fpu=None           #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    D:\Projects\google_host\drift-sensor\ -I                 #
#                    D:\Projects\google_host\drift-sensor\Config\             #
#                    --interwork --cpu_mode thumb -Om                         #
#    List file    =  D:\Projects\google_host\drift-sensor\Release\List\calibr #
#                    ating.lst                                                #
#    Object file  =  D:\Projects\google_host\drift-sensor\Release\Obj\calibra #
#                    ting.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\Projects\google_host\drift-sensor\Drift\calibrating.c
      1          /******************************************************************************/
      2          /* calibrating.c                                                              */
      3          /******************************************************************************/
      4          
      5          #include "data_types.h"
      6          #include "Core\core.h"
      7          #include "Lib\float_to_txt.h"
      8          #include "Matrix\matrix.h"
      9          #include "Uart\v_printf.h"
     10          #include "Drift\drift.h"
     11          
     12          
     13          static calibr_data quiet_data;
     14          static calibr_data motion_data;
     15          static sint16_t motion_max_d;
     16          
     17          static average_buff x_acc_filter;
     18          static average_buff y_acc_filter;
     19          static average_buff z_acc_filter;
     20          
     21          static float32_t rotation[9] = {1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0};
     22          
     23          /*
     24           * Init calibr data
     25           *
     26           */
     27          void init_calibrating_data() {
     28              init_average_filter(&x_acc_filter);
     29              init_average_filter(&y_acc_filter);
     30              init_average_filter(&z_acc_filter);
     31          
     32              set_wind_size_average_filter(&x_acc_filter, AVERAGE_MAX_WINDOW_SIZE);
     33              set_wind_size_average_filter(&y_acc_filter, AVERAGE_MAX_WINDOW_SIZE);
     34              set_wind_size_average_filter(&z_acc_filter, AVERAGE_MAX_WINDOW_SIZE);
     35          
     36              quiet_data.x = 0;
     37              quiet_data.y = 0;
     38              quiet_data.z = 0;
     39          
     40              motion_data.x = 0;
     41              motion_data.y = 0;
     42              motion_data.z = 0;
     43          
     44              motion_max_d = 0;
     45          
     46              rotation[0] = rotation[1] = rotation[2] = 0.0;
     47              rotation[3] = rotation[4] = rotation[5] = 0.0;
     48              rotation[6] = rotation[7] = rotation[8] = 0.0;
     49          }
     50          
     51          
     52          /*
     53           * Add acc samples in calibr
     54           *
     55           */
     56          void add_acc_samples_in_calibr(const uint16_t x_acc, const uint16_t y_acc, const uint16_t z_acc) {
     57              add_sample_in_filter(&x_acc_filter, x_acc);
     58              add_sample_in_filter(&y_acc_filter, y_acc);
     59              add_sample_in_filter(&z_acc_filter, z_acc);
     60          }
     61          
     62          
     63          /*
     64           * Handle accel data calibr
     65           *
     66           */
     67          void handle_acc_samples_in_calibr() {
     68              const sint16_t x_sample = get_last_sample(&x_acc_filter);
     69              const sint16_t y_sample = get_last_sample(&y_acc_filter);
     70              const sint16_t z_sample = get_last_sample(&z_acc_filter);
     71          
     72              // get delta
     73              sint16_t x_d = get_last_sample(&x_acc_filter) - quiet_data.x;
     74              sint16_t y_d = get_last_sample(&y_acc_filter) - quiet_data.y;
     75              sint16_t z_d = get_last_sample(&z_acc_filter) - quiet_data.z;
     76          
     77              // set module val
     78              x_d = x_d < 0 ? (-1 * x_d) : x_d;
     79              y_d = y_d < 0 ? (-1 * y_d) : y_d;
     80              z_d = z_d < 0 ? (-1 * z_d) : z_d;
     81          
     82              // need find max delta
     83              bool_t isMaxFound = FALSE_T;
     84              if (x_d > motion_max_d || y_d > motion_max_d || z_d > motion_max_d) {
     85                  isMaxFound = TRUE_T;
     86          
     87                  if (x_d > y_d && x_d > z_d) {
     88                      motion_max_d = x_d;
     89                  } else if (y_d > x_d && y_d > z_d) {
     90                      motion_max_d = y_d;
     91                  } else if (z_d > x_d && z_d > y_d) {
     92                      motion_max_d = z_d;
     93                  } else {
     94                      motion_max_d = MAX(x_d, y_d);
     95                      motion_max_d = MAX(motion_max_d, z_d);
     96                  }
     97              }
     98          
     99              if (isMaxFound) {
    100                  motion_data.x = x_sample;
    101                  motion_data.y = y_sample;
    102                  motion_data.z = z_sample;
    103              }
    104          }
    105          
    106          
    107          /*
    108           * Commit quiet data calibr
    109           *
    110           */
    111          void commit_quiet_calibr_data() {
    112              quiet_data.x = get_average(&x_acc_filter);
    113              quiet_data.y = get_average(&y_acc_filter);
    114              quiet_data.z = get_average(&z_acc_filter);
    115          }
    116          
    117          
    118          /*
    119           * Commit motion data calibr
    120           *
    121           */
    122          sint16_t commit_motion_calibr_data() {
    123              const sint16_t quiet[3] = {quiet_data.x, quiet_data.y, quiet_data.z};
    124              const sint16_t motion[3] = {motion_data.x, motion_data.y, motion_data.z};
    125          
    126              return rotate(quiet, motion, rotation);
    127          }
    128          
    129          
    130          /*
    131           * Print calibr results
    132           *
    133           */
    134          void print_calibr_results() {
    135              uint32_t ff_comp[3];
    136              int8_t add_null[4];
    137          
    138              DEBUG_PRINTF("*********** Results ***************\r\n");
    139              DEBUG_PRINTF("quiet values:\r\n");
    140              DEBUG_PRINTF(" x = %d\r\n", quiet_data.x);
    141              DEBUG_PRINTF(" y = %d\r\n", quiet_data.y);
    142              DEBUG_PRINTF(" z = %d\r\n", quiet_data.z);
    143          
    144              DEBUG_PRINTF("motion max values:\r\n");
    145              DEBUG_PRINTF(" x = %d\r\n", motion_data.x);
    146              DEBUG_PRINTF(" y = %d\r\n", motion_data.y);
    147              DEBUG_PRINTF(" z = %d\r\n", motion_data.z);
    148              DEBUG_PRINTF("rotation matrix values:\r\n");
    149          
    150              split_float_to_comp(rotation[0], ff_comp);
    151              if (ff_comp[2] >= 1000 || !ff_comp[2]) {
    152                  add_null[0] = 0;
    153              } else if (ff_comp[2] >= 100) {
    154                  add_null[0] = '0';
    155                  add_null[1] = 0;
    156              } else if (ff_comp[2] >= 10)  {
    157                  add_null[0] = '0';
    158                  add_null[1] = '0';
    159                  add_null[2] = 0;
    160              } else {
    161                  add_null[0] = '0';
    162                  add_null[1] = '0';
    163                  add_null[2] = '0';
    164                  add_null[3] = 0;
    165              }
    166              DEBUG_PRINTF("rotation[0] = %c%d.%s%d\r\n", ff_comp[0] ? '-' : '+', ff_comp[1], add_null, ff_comp[2]);
    167          
    168              split_float_to_comp(rotation[1], ff_comp);
    169              if (ff_comp[2] >= 1000 || !ff_comp[2]) {
    170                  add_null[0] = 0;
    171              } else if (ff_comp[2] >= 100) {
    172                  add_null[0] = '0';
    173                  add_null[1] = 0;
    174              } else if (ff_comp[2] >= 10)  {
    175                  add_null[0] = '0';
    176                  add_null[1] = '0';
    177                  add_null[2] = 0;
    178              } else {
    179                  add_null[0] = '0';
    180                  add_null[1] = '0';
    181                  add_null[2] = '0';
    182                  add_null[3] = 0;
    183              }
    184              DEBUG_PRINTF("rotation[1] = %c%d.%s%d\r\n", ff_comp[0] ? '-' : '+', ff_comp[1], add_null, ff_comp[2]);
    185          
    186              split_float_to_comp(rotation[2], ff_comp);
    187              if (ff_comp[2] >= 1000 || !ff_comp[2]) {
    188                  add_null[0] = 0;
    189              } else if (ff_comp[2] >= 100) {
    190                  add_null[0] = '0';
    191                  add_null[1] = 0;
    192              } else if (ff_comp[2] >= 10)  {
    193                  add_null[0] = '0';
    194                  add_null[1] = '0';
    195                  add_null[2] = 0;
    196              } else {
    197                  add_null[0] = '0';
    198                  add_null[1] = '0';
    199                  add_null[2] = '0';
    200                  add_null[3] = 0;
    201              }
    202              DEBUG_PRINTF("rotation[2] = %c%d.%s%d\r\n", ff_comp[0] ? '-' : '+', ff_comp[1], add_null, ff_comp[2]);
    203          
    204              split_float_to_comp(rotation[3], ff_comp);
    205              if (ff_comp[2] >= 1000 || !ff_comp[2]) {
    206                  add_null[0] = 0;
    207              } else if (ff_comp[2] >= 100) {
    208                  add_null[0] = '0';
    209                  add_null[1] = 0;
    210              } else if (ff_comp[2] >= 10)  {
    211                  add_null[0] = '0';
    212                  add_null[1] = '0';
    213                  add_null[2] = 0;
    214              } else {
    215                  add_null[0] = '0';
    216                  add_null[1] = '0';
    217                  add_null[2] = '0';
    218                  add_null[3] = 0;
    219              }
    220              DEBUG_PRINTF("rotation[3] = %c%d.%s%d\r\n", ff_comp[0] ? '-' : '+', ff_comp[1], add_null, ff_comp[2]);
    221          
    222              split_float_to_comp(rotation[4], ff_comp);
    223              if (ff_comp[2] >= 1000 || !ff_comp[2]) {
    224                  add_null[0] = 0;
    225              } else if (ff_comp[2] >= 100) {
    226                  add_null[0] = '0';
    227                  add_null[1] = 0;
    228              } else if (ff_comp[2] >= 10)  {
    229                  add_null[0] = '0';
    230                  add_null[1] = '0';
    231                  add_null[2] = 0;
    232              } else {
    233                  add_null[0] = '0';
    234                  add_null[1] = '0';
    235                  add_null[2] = '0';
    236                  add_null[3] = 0;
    237              }
    238              DEBUG_PRINTF("rotation[4] = %c%d.%s%d\r\n", ff_comp[0] ? '-' : '+', ff_comp[1], add_null, ff_comp[2]);
    239          
    240              split_float_to_comp(rotation[5], ff_comp);
    241              if (ff_comp[2] >= 1000 || !ff_comp[2]) {
    242                  add_null[0] = 0;
    243              } else if (ff_comp[2] >= 100) {
    244                  add_null[0] = '0';
    245                  add_null[1] = 0;
    246              } else if (ff_comp[2] >= 10)  {
    247                  add_null[0] = '0';
    248                  add_null[1] = '0';
    249                  add_null[2] = 0;
    250              } else {
    251                  add_null[0] = '0';
    252                  add_null[1] = '0';
    253                  add_null[2] = '0';
    254                  add_null[3] = 0;
    255              }
    256              DEBUG_PRINTF("rotation[5] = %c%d.%s%d\r\n", ff_comp[0] ? '-' : '+', ff_comp[1], add_null, ff_comp[2]);
    257          
    258              split_float_to_comp(rotation[6], ff_comp);
    259              if (ff_comp[2] >= 1000 || !ff_comp[2]) {
    260                  add_null[0] = 0;
    261              } else if (ff_comp[2] >= 100) {
    262                  add_null[0] = '0';
    263                  add_null[1] = 0;
    264              } else if (ff_comp[2] >= 10)  {
    265                  add_null[0] = '0';
    266                  add_null[1] = '0';
    267                  add_null[2] = 0;
    268              } else {
    269                  add_null[0] = '0';
    270                  add_null[1] = '0';
    271                  add_null[2] = '0';
    272                  add_null[3] = 0;
    273              }
    274              DEBUG_PRINTF("rotation[6] = %c%d.%s%d\r\n", ff_comp[0] ? '-' : '+', ff_comp[1], add_null, ff_comp[2]);
    275          
    276              split_float_to_comp(rotation[7], ff_comp);
    277              if (ff_comp[2] >= 1000 || !ff_comp[2]) {
    278                  add_null[0] = 0;
    279              } else if (ff_comp[2] >= 100) {
    280                  add_null[0] = '0';
    281                  add_null[1] = 0;
    282              } else if (ff_comp[2] >= 10)  {
    283                  add_null[0] = '0';
    284                  add_null[1] = '0';
    285                  add_null[2] = 0;
    286              } else {
    287                  add_null[0] = '0';
    288                  add_null[1] = '0';
    289                  add_null[2] = '0';
    290                  add_null[3] = 0;
    291              }
    292              DEBUG_PRINTF("rotation[7] = %c%d.%s%d\r\n", ff_comp[0] ? '-' : '+', ff_comp[1], add_null, ff_comp[2]);
    293          
    294              split_float_to_comp(rotation[8], ff_comp);
    295              if (ff_comp[2] >= 1000 || !ff_comp[2]) {
    296                  add_null[0] = 0;
    297              } else if (ff_comp[2] >= 100) {
    298                  add_null[0] = '0';
    299                  add_null[1] = 0;
    300              } else if (ff_comp[2] >= 10)  {
    301                  add_null[0] = '0';
    302                  add_null[1] = '0';
    303                  add_null[2] = 0;
    304              } else {
    305                  add_null[0] = '0';
    306                  add_null[1] = '0';
    307                  add_null[2] = '0';
    308                  add_null[3] = 0;
    309              }
    310              DEBUG_PRINTF("rotation[8] = %c%d.%s%d\r\n", ff_comp[0] ? '-' : '+', ff_comp[1], add_null, ff_comp[2]);
    311          }
    312          
    313          
    314          /*
    315           * Get calibr quiet data
    316           *
    317           */
    318          calibr_data * get_calibr_quiet_data() {
    319              return &quiet_data;
    320          }
    321          
    322          
    323          /*
    324           * Get calibr motion data
    325           *
    326           */
    327          calibr_data * get_calibr_motion_data() {
    328              return &motion_data;
    329          }
    330          
    331          
    332          /*
    333           * Get calibr motion data
    334           *
    335           */
    336          float32_t * get_rotation_matrix() {
    337              return rotation;
    338          }
    339          
    340          
    341          

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     add_acc_samples_in_calibr        16
     commit_motion_calibr_data        24
     commit_quiet_calibr_data          8
     get_calibr_motion_data            0
     get_calibr_quiet_data             0
     get_rotation_matrix               0
     handle_acc_samples_in_calibr     32
     init_calibrating_data            16
     print_calibr_results             40


   Section sizes:

     Function/Label                         Bytes
     --------------                         -----
     quiet_data                              680
     motion_data
     motion_max_d
     rotation
     x_acc_filter
     y_acc_filter
     z_acc_filter
     init_calibrating_data                    98
     add_acc_samples_in_calibr                60
     handle_acc_samples_in_calibr            242
     commit_quiet_calibr_data                 44
     commit_motion_calibr_data                50
     print_calibr_results                   1266
     get_calibr_quiet_data                     4
     get_calibr_motion_data                    6
     get_rotation_matrix                       6
     ??DataTable20                             4
     ?<Constant "*********** Results *...">   40
     ?<Constant "quiet values:\r\n">          16
     ?<Constant " x = %d\r\n">                12
     ?<Constant " y = %d\r\n">                12
     ?<Constant " z = %d\r\n">                12
     ?<Constant "motion max values:\r\n">     24
     ?<Constant "rotation matrix value...">   28
     ?<Constant "rotation[0] = %c%d.%s...">   28
     ?<Constant "rotation[1] = %c%d.%s...">   28
     ?<Constant "rotation[2] = %c%d.%s...">   28
     ?<Constant "rotation[3] = %c%d.%s...">   28
     ??DataTable24                             4
     ?<Constant "rotation[4] = %c%d.%s...">   28
     ?<Constant "rotation[5] = %c%d.%s...">   28
     ?<Constant "rotation[6] = %c%d.%s...">   28
     ?<Constant "rotation[7] = %c%d.%s...">   28
     ?<Constant "rotation[8] = %c%d.%s...">   28
      Others                                   8

 
   680 bytes in section .data
   200 bytes in section .rodata
 1 988 bytes in section .text
 
 1 980 bytes of CODE  memory (+ 8 bytes shared)
   200 bytes of CONST memory
   680 bytes of DATA  memory

Errors: none
Warnings: none
